<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PodcastUtilities.Common</name>
    </assembly>
    <members>
        <member name="T:PodcastUtilities.Common.Configuration.BaseControlFile">
            <summary>
            base operations to work with controlfiles
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultNumberOfFiles">
            <summary>
            the file pattern for files that are in a podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultFilePattern">
            <summary>
            the file pattern for files that are in a podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultDeleteEmptyFolder">
            <summary>
            global default for option to delete folder that become empty
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultPostDownloadCommand">
            <summary>
            the command to be run after the download
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultPostDownloadArguments">
            <summary>
            the args for the post download command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultPostDownloadWorkingDirectory">
            <summary>
            the cwd for the post download command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultSortField">
            <summary>
            the field we are using to sort the podcasts on
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultAscendingSort">
            <summary>
            direction to sort in
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultFeedMaximumDaysOld">
            <summary>
            global default maximum days old for feed download
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultFeedDeleteDownloadsDaysOld">
            <summary>
            global default number of days before deleteing a download
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultFeedFormat">
            <summary>
            global default feed format 
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultFeedEpisodeNamingStyle">
            <summary>
            global default for naming downloaded episodes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DefaultFeedEpisodeDownloadStrategy">
            <summary>
            global default for mechanism for downloading episodes
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.#ctor(System.Xml.XmlDocument)">
            <summary>
            only used for unit testing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.#ctor">
            <summary>
            setup the hard coded defaults
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultDeleteDownloadsDaysOld">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultDownloadStrategy">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultFeedFormat">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultMaximumDaysOld">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultNamingStyle">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultNumberOfFiles">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultFilePattern">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultDeleteEmptyFolder">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultAscendingSort">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultSortField">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultPostDownloadCommand">
            <summary>
            the global default for post download command
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultPostDownloadArguments">
            <summary>
            the global default for post download command args
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDefaultPostDownloadWorkingDirectory">
            <summary>
            the global default for post download command cwd
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DiagnosticOutput">
            <summary>
            level of diagnostic output
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DiagnosticRetainTemporaryFiles">
            <summary>
            set to retain intermediate files
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.SourceRoot">
            <summary>
            pathname to the root folder to copy from when synchronising
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.DestinationRoot">
            <summary>
            pathname to the destination root folder
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.PlaylistFileName">
            <summary>
            filename and extension for the generated playlist
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.PlaylistFormat">
            <summary>
            the format for the generated playlist
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.FreeSpaceToLeaveOnDestination">
            <summary>
            free space in MB to leave on the destination device when syncing
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.FreeSpaceToLeaveOnDownload">
            <summary>
            free space in MB to leave on the download device - when downloading
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.Podcasts">
            <summary>
            the configuration for the individual podcasts
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.MaximumNumberOfConcurrentDownloads">
            <summary>
            maximum number of background downloads
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.BaseControlFile.RetryWaitInSeconds">
            <summary>
            number of seconds to wait when trying a file conflict
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDiagnosticOutput">
            <summary>
            level of diagnostic output
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDiagnosticRetainTemporaryFiles">
            <summary>
            set to retain intermediate files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetSourceRoot">
            <summary>
            pathname to the root folder to copy from when synchronising
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetDestinationRoot">
            <summary>
            pathname to the destination root folder
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetPlaylistFileName">
            <summary>
            filename and extension for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetPlaylistFormat">
            <summary>
            the format for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetFreeSpaceToLeaveOnDestination">
            <summary>
            free space in MB to leave on the destination device when syncing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetFreeSpaceToLeaveOnDownload">
            <summary>
            free space in MB to leave on the download device - when downloading
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetPodcasts">
            <summary>
            the configuration for the individual podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetMaximumNumberOfConcurrentDownloads">
            <summary>
            maximum number of background downloads
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.GetRetryWaitInSeconds">
            <summary>
            number of seconds to wait when trying a file conflict
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.BaseControlFile.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
                            </param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1">
            <summary>
            an item that can have a value or provide a default value
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1.#ctor(System.Func{`0})">
            <summary>
            create a defaultable item and specify the method of obtaining the default value
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1.Value">
            <summary>
            the item value, or its default value if not set
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1.IsSet">
            <summary>
            true if the value is set at this level
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1.RevertToDefault">
            <summary>
            remove the value at this level
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1.Copy(PodcastUtilities.Common.Configuration.IDefaultableItem{`0})">
            <summary>
             Make this into a copy of the source, ie. if the source IsSet copy its value,
             otherwise revert this to default.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableValueTypeItem`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.DefaultableReferenceTypeItem`1">
            <summary>
            an item that can have a value or provide a default value
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableReferenceTypeItem`1.#ctor(System.Func{`0})">
            <summary>
            create a defaultable item and specify the method of obtaining the default value
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.DefaultableReferenceTypeItem`1.Value">
            <summary>
            the item value, or its default value if not set
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.DefaultableReferenceTypeItem`1.IsSet">
            <summary>
            true if the value is set at this level
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableReferenceTypeItem`1.RevertToDefault">
            <summary>
            remove the value at this level
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.DefaultableReferenceTypeItem`1.Copy(PodcastUtilities.Common.Configuration.IDefaultableItem{`0})">
            <summary>
             Make this into a copy of the source, ie. if the source IsSet copy its value,
             otherwise revert this to default.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.DiagnosticOutputLevel">
            <summary>
            the amount of diagnostic information to produce
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.DiagnosticOutputLevel.None">
            <summary>
            none
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.DiagnosticOutputLevel.Verbose">
            <summary>
            verbose
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults">
            <summary>
            the properties of the global section that are used to fill in missing values in podcasts and feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultDeleteDownloadsDaysOld">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultDownloadStrategy">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultFeedFormat">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultMaximumDaysOld">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultNamingStyle">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultNumberOfFiles">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultFilePattern">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultDeleteEmptyFolder">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultAscendingSort">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultSortField">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultPostDownloadCommand">
            <summary>
            the global default for post download command
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultPostDownloadArguments">
            <summary>
            the global default for post download command args
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults.GetDefaultPostDownloadWorkingDirectory">
            <summary>
            the global default for post download command cwd
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IDefaultableItem`1">
            <summary>
            an item that can have a value or provide a default value
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IDefaultableItem`1.IsSet">
            <summary>
            true if the value is set at this level
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IDefaultableItem`1.RevertToDefault">
            <summary>
            remove the value at this level
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IDefaultableItem`1.Value">
            <summary>
            the item value, or its default value if not set
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IDefaultableItem`1.Copy(PodcastUtilities.Common.Configuration.IDefaultableItem{`0})">
            <summary>
             Make this into a copy of the source, ie. if the source IsSet copy its value,
             otherwise revert this to default.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IFeedInfo">
            <summary>
            configuration info for a podcast feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IFeedInfo.Address">
            <summary>
            the address of the podcast feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IFeedInfo.Format">
            <summary>
            the format the feed is in
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IFeedInfo.MaximumDaysOld">
            <summary>
            do not download podcasts that werre published before this number of days ago
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IFeedInfo.NamingStyle">
            <summary>
            the naming style to use for episodes downloaded from the feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IFeedInfo.DownloadStrategy">
            <summary>
            the strategy to be used when downloading episodes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IFeedInfo.DeleteDownloadsDaysOld">
            <summary>
            number of days before we delete a download
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IPodcastInfo">
            <summary>
            an individual podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IPodcastInfo.Folder">
            <summary>
            the folder relative to the source root that contains the media for the podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IPodcastInfo.Pattern">
            <summary>
            file pattern for the media files eg. *.mp3
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IPodcastInfo.DeleteEmptyFolder">
            <summary>
            true if we should delete a folder when all the podcasts have been removed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IPodcastInfo.SortField">
            <summary>
            field to sort on "creationtime" to use the file created time anything else to use the file name
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IPodcastInfo.AscendingSort">
            <summary>
            true for an ascending sort, false for a descending
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IPodcastInfo.MaximumNumberOfFiles">
            <summary>
            maximum number of files to copy, -1 for unlimited
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.IPodcastInfo.Feed">
            <summary>
            the configuration info for the feed
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IPodcastInfo.CreateFeed">
            <summary>
            create a feed in the podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IPodcastInfo.RemoveFeed">
            <summary>
            remove a feed from the podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IPodcastInfo.CreatePostDownloadCommand">
            <summary>
            create a post download command in the podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IPodcastInfo.RemovePostDownloadCommand">
            <summary>
            remove a post download command from the podcast
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults">
            <summary>
            the properties of the global section that are used to fill in missing values in podcasts and feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultDeleteDownloadsDaysOld(System.Int32)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultDownloadStrategy(PodcastUtilities.Common.Configuration.PodcastEpisodeDownloadStrategy)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultFeedFormat(PodcastUtilities.Common.Configuration.PodcastFeedFormat)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultMaximumDaysOld(System.Int32)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultNamingStyle(PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultNumberOfFiles(System.Int32)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultFilePattern(System.String)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultAscendingSort(System.Boolean)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultSortField(PodcastUtilities.Common.Configuration.PodcastFileSortField)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultPostDownloadCommand(System.String)">
            <summary>
            the global default for post download command
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultPostDownloadArguments(System.String)">
            <summary>
            the global default for post download command args
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFileGlobalDefaults.SetDefaultPostDownloadWorkingDirectory(System.String)">
            <summary>
            the global default for post download command cwd
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.PodcastFileSortField">
            <summary>
            field to sort podcast files on
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastFileSortField.FileName">
            <summary>
            sort files by file name
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastFileSortField.CreationTime">
            <summary>
            sort by created date time
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.ReadOnlyControlFile">
            <summary>
            this object represents the xml control file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadOnlyControlFile.#ctor">
            <summary>
            create an empty control file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadOnlyControlFile.#ctor(System.String)">
            <summary>
            create the object and read the control file from the specified filename
            </summary>
            <param name="fileName">pathname to the control file xml</param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadOnlyControlFile.#ctor(System.Xml.XmlDocument)">
            <summary>
            only used for unit testing
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.ControlFileFactory">
            <summary>
             Implementation of control file factory
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ControlFileFactory.OpenControlFile(System.String)">
            <summary>
             Opens an existing control file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IReadWriteControlFile">
            <summary>
            this object represents the xml control file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetDiagnosticOutput(PodcastUtilities.Common.Configuration.DiagnosticOutputLevel)">
            <summary>
            level of diagnostic output
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetDiagnosticRetainTemporaryFiles(System.Boolean)">
            <summary>
            set to retain intermediate files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetSourceRoot(System.String)">
            <summary>
            pathname to the root folder to copy from when synchronising
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetDestinationRoot(System.String)">
            <summary>
            pathname to the destination root folder
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetPlaylistFileName(System.String)">
            <summary>
            filename and extension for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetPlaylistFormat(PodcastUtilities.Common.Playlists.PlaylistFormat)">
            <summary>
            the format for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetFreeSpaceToLeaveOnDestination(System.Int64)">
            <summary>
            free space in MB to leave on the destination device when syncing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetFreeSpaceToLeaveOnDownload(System.Int64)">
            <summary>
            free space in MB to leave on the download device - when downloading
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetMaximumNumberOfConcurrentDownloads(System.Int32)">
            <summary>
            maximum number of background downloads
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SetRetryWaitInSeconds(System.Int32)">
            <summary>
            number of seconds to wait when trying a file conflict
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadWriteControlFile.SaveToFile(System.String)">
            <summary>
            persist the control file to disk
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.ReadWriteControlFile">
            <summary>
            controlfile implementation that supports loading and saving
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.#ctor(System.String)">
            <summary>
            create the object and read the control file from the specified filename
            </summary>
            <param name="fileName">pathname to the control file xml</param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.#ctor">
            <summary>
            used for cloning
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.#ctor(System.Xml.XmlDocument)">
            <summary>
            only used for unit testing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultDeleteDownloadsDaysOld(System.Int32)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultDownloadStrategy(PodcastUtilities.Common.Configuration.PodcastEpisodeDownloadStrategy)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultFeedFormat(PodcastUtilities.Common.Configuration.PodcastFeedFormat)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultMaximumDaysOld(System.Int32)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultNamingStyle(PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle)">
            <summary>
            the global default for feeds
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultNumberOfFiles(System.Int32)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultFilePattern(System.String)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultDeleteEmptyFolder(System.Boolean)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultAscendingSort(System.Boolean)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultSortField(PodcastUtilities.Common.Configuration.PodcastFileSortField)">
            <summary>
            the global default for podcasts
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultPostDownloadCommand(System.String)">
            <summary>
            the global default for post download command
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultPostDownloadArguments(System.String)">
            <summary>
            the global default for post download command args
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDefaultPostDownloadWorkingDirectory(System.String)">
            <summary>
            the global default for post download command cwd
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDiagnosticOutput(PodcastUtilities.Common.Configuration.DiagnosticOutputLevel)">
            <summary>
            level of diagnostic output
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDiagnosticRetainTemporaryFiles(System.Boolean)">
            <summary>
            set to retain intermediate files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetSourceRoot(System.String)">
            <summary>
            pathname to the root folder to copy from when synchronising
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetDestinationRoot(System.String)">
            <summary>
            pathname to the destination root folder
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetPlaylistFileName(System.String)">
            <summary>
            filename and extension for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetPlaylistFormat(PodcastUtilities.Common.Playlists.PlaylistFormat)">
            <summary>
            the format for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetFreeSpaceToLeaveOnDestination(System.Int64)">
            <summary>
            free space in MB to leave on the destination device when syncing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetFreeSpaceToLeaveOnDownload(System.Int64)">
            <summary>
            free space in MB to leave on the download device - when downloading
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetMaximumNumberOfConcurrentDownloads(System.Int32)">
            <summary>
            maximum number of background downloads
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SetRetryWaitInSeconds(System.Int32)">
            <summary>
            number of seconds to wait when trying a file conflict
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.SaveToFile(System.String)">
            <summary>
            persist the control file to disk
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.ReadWriteControlFile.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
                            </param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.ProcessorResult">
            <summary>
            the resullt of processing an element or a sub element
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.ProcessorResult.Ignored">
            <summary>
            the element was ignored
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.ProcessorResult.Processed">
            <summary>
            the element was processed
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.SubElementProcessor">
            <summary>
            a function that can process a sub element
            </summary>
            <param name="reader">the reader</param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.XmlSerializationHelper">
            <summary>
            helper to process sections of an xml file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.XmlSerializationHelper.ProcessElement(System.Xml.XmlReader,System.String,PodcastUtilities.Common.Configuration.SubElementProcessor)">
            <summary>
            process an xml element when reading an xml stream
            </summary>
            <param name="reader">the reader</param>
            <param name="elementName">the name of the element we are processing</param>
            <param name="subElementProcessor">a delegate to process any sub elements detected</param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.XmlSerializationHelper.CloneUsingXmlSerialization(System.String,System.Xml.Serialization.IXmlSerializable,System.Xml.Serialization.IXmlSerializable)">
            <summary>
            deep copy an object using XmlSerialization
            </summary>
            <param name="elementName">name of surrounding element when writing the object</param>
            <param name="source">object to copy</param>
            <param name="destination">new blank element to copy into</param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IControlFileFactory">
            <summary>
             Abstracts creation/opening of control files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IControlFileFactory.OpenControlFile(System.String)">
            <summary>
             Opens an existing control file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.TokenisedCommand">
            <summary>
            an tokenised command
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.TokenisedCommand.#ctor(PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults)">
            <summary>
            a tokenised command
            </summary>
            <param name="controlFileGlobalDefaults"></param>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.TokenisedCommand.Command">
            <summary>
            the command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.TokenisedCommand.Arguments">
            <summary>
            the arguments
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.TokenisedCommand.WorkingDirectory">
            <summary>
            the current working dir
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.TokenisedCommand.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.TokenisedCommand.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.TokenisedCommand.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
                            </param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.TokenisedCommand.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
                            </param>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.ITokenisedCommand">
            <summary>
            an external command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.ITokenisedCommand.Command">
            <summary>
            the command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.ITokenisedCommand.Arguments">
            <summary>
            the arguments
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.ITokenisedCommand.WorkingDirectory">
            <summary>
            the current working dir
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IPodcastFactory">
            <summary>
             Factory interface for creating podcast objects
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IPodcastFactory.CreatePodcast(PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults)">
            <summary>
             Create a new podcast
            </summary>
            <param name="controlFile"></param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.PodcastEpisodeDownloadStrategy">
            <summary>
            how to download episodes
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeDownloadStrategy.All">
            <summary>
            get all episodes
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeDownloadStrategy.HighTide">
            <summary>
            only get episodes newer than the latest download
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeDownloadStrategy.Latest">
            <summary>
            only get the latest episode
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.PodcastFactory">
            <summary>
             Factory for creating podcast objects
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastFactory.CreatePodcast(PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults)">
            <summary>
             Create a new podcast
            </summary>
            <param name="controlFile"></param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.FeedInfo">
            <summary>
            configuration info for a podcast feed
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.#ctor(PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults)">
            <summary>
            construct a new feed element
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.FeedInfo.Address">
            <summary>
            the address of the podcast feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.FeedInfo.Format">
            <summary>
            the format the feed is in
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.FeedInfo.MaximumDaysOld">
            <summary>
            do not download podcasts that werre published before this number of days ago
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.FeedInfo.NamingStyle">
            <summary>
            the naming style to use for episodes downloaded from the feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.FeedInfo.DownloadStrategy">
            <summary>
            the strategy to be used when downloading episodes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.FeedInfo.DeleteDownloadsDaysOld">
            <summary>
            number of days before we delete a download
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
                            </param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
                            </param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.ReadFeedEpisodeNamingStyle(System.String)">
            <summary>
            parse the feed naming style
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.WriteFeedEpisodeNamingStyle(PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle)">
            <summary>
            convert the namingstyle for serialisation
            </summary>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.ReadFeedEpisodeDownloadStrategy(System.String)">
            <summary>
            parse the download strategy
            </summary>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.WriteFeedEpisodeDownloadStrategy(PodcastUtilities.Common.Configuration.PodcastEpisodeDownloadStrategy)">
            <summary>
            convert the download strategy for serialisation
            </summary>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.ReadFeedFormat(System.String)">
            <summary>
            parse the feed format
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.FeedInfo.WriteFeedFormat(PodcastUtilities.Common.Configuration.PodcastFeedFormat)">
            <summary>
            convert the feedformat for serialisation
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.IReadOnlyControlFile">
            <summary>
            this object represents the xml control file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetSourceRoot">
            <summary>
            pathname to the root folder to copy from when synchronising
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetDestinationRoot">
            <summary>
            pathname to the destination root folder
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetPlaylistFileName">
            <summary>
            filename and extension for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetPlaylistFormat">
            <summary>
            the format for the generated playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetFreeSpaceToLeaveOnDestination">
            <summary>
            free space in MB to leave on the destination device - when syncing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetFreeSpaceToLeaveOnDownload">
            <summary>
            free space in MB to leave on the download device - when downloading
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetMaximumNumberOfConcurrentDownloads">
            <summary>
            maximum number of background downloads
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetRetryWaitInSeconds">
            <summary>
            number of seconds to wait when trying a file conflict
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.IReadOnlyControlFile.GetPodcasts">
            <summary>
            the configuration for the individual podcasts
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle">
            <summary>
            how to name the files as they are downloaded
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle.UrlFileName">
            <summary>
            use the filename part of the url as the name
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle.UrlFileNameAndPublishDateTime">
            <summary>
            use the filename from the url and the date time the episode was published
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle.UrlFileNameFeedTitleAndPublishDateTime">
            <summary>
            use the filename from the url, the title of the feed and the published date time
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle.UrlFileNameFeedTitleAndPublishDateTimeInfolder">
            <summary>
            as UrlFilenameFeedTitleAndPublishDateTime but each month is put in a folder
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle.EpisodeTitle">
            <summary>
            use the podcast title as the name
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastEpisodeNamingStyle.EpisodeTitleAndPublishDateTime">
            <summary>
            use the published date time and the episode title
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.PodcastFeedFormat">
            <summary>
            format of the feed
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastFeedFormat.RSS">
            <summary>
            RSS format
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Configuration.PodcastFeedFormat.ATOM">
            <summary>
            ATOM format
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Configuration.PodcastInfo">
            <summary>
            an individual podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.#ctor(PodcastUtilities.Common.Configuration.IControlFileGlobalDefaults)">
            <summary>
             Podcast ctor
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.Folder">
            <summary>
            the folder relative to the source root that contains the media for the podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.Pattern">
            <summary>
            file pattern for the media files eg. *.mp3
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.DeleteEmptyFolder">
            <summary>
            true if we should delete a folder when all the podcasts have been removed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.SortField">
            <summary>
            field to sort on "creationtime" to use the file created time anything else to use the file name
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.AscendingSort">
            <summary>
            true for an ascending sort, false for a descending
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.MaximumNumberOfFiles">
            <summary>
            maximum number of files to copy, -1 for unlimited
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.Feed">
            <summary>
            the configuration info for the feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Configuration.PodcastInfo.PostDownloadCommand">
            <summary>
            command to be executed after the podcast has been downloaded
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.CreateFeed">
            <summary>
            create a feed in the podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.RemoveFeed">
            <summary>
            remove a feed from the podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.CreatePostDownloadCommand">
            <summary>
            create a post download command in the podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.RemovePostDownloadCommand">
            <summary>
            remove a post download command from the podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. 
                            </param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. 
                            </param>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.ReadSortField(System.String)">
            <summary>
            parse the sort field
            </summary>
            <param name="sortField"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.WriteSortField(PodcastUtilities.Common.Configuration.PodcastFileSortField)">
            <summary>
            convert the sortfield for serialisation
            </summary>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.ReadSortDirection(System.String)">
            <summary>
            parse the sort direction
            </summary>
            <param name="sortDirection"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Configuration.PodcastInfo.WriteSortDirection(System.Boolean)">
            <summary>
            convert the sortdirection for serialisation
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.DisplayFormatter">
            <summary>
            render data for display
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.DisplayFormatter.RenderFileSize(System.Int64)">
            <summary>
            render a file size into KB or MB or GB as appropriate
            </summary>
            <param name="numberOfBytes"></param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Exceptions.ControlFileValueFormatException">
            <summary>
            exceptions that relate to the representation of values in the control file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.ControlFileValueFormatException.#ctor">
            <summary>
            a ControlFileValueFormatException
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.ControlFileValueFormatException.#ctor(System.String)">
            <summary>
            a ControlFileValueFormatException
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.ControlFileValueFormatException.#ctor(System.String,System.Exception)">
            <summary>
            a ControlFileValueFormatException
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.ControlFileValueFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            a ControlFileValueFormatException
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Exceptions.DownloaderException">
            <summary>
            exceptions that relate to downloads
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.DownloaderException.#ctor">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.DownloaderException.#ctor(System.String)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.DownloaderException.#ctor(System.String,System.Exception)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.DownloaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Exceptions.EnumOutOfRangeException">
            <summary>
            exceptions that relate enums containing unexpected or out of range values
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.EnumOutOfRangeException.#ctor">
            <summary>
            a enum out of range exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.EnumOutOfRangeException.#ctor(System.String)">
            <summary>
            a enum out of range exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.EnumOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            a enum out of range exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.EnumOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            a enum out of range exception
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Exceptions.FeedStructureException">
            <summary>
            exceptions that relate the structure of a feed
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.FeedStructureException.#ctor">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.FeedStructureException.#ctor(System.String)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.FeedStructureException.#ctor(System.String,System.Exception)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.FeedStructureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Exceptions.XmlStructureException">
            <summary>
            exceptions that relate the structure of xml such that the expected xpath does not work
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.XmlStructureException.#ctor">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.XmlStructureException.#ctor(System.String)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.XmlStructureException.#ctor(System.String,System.Exception)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Exceptions.XmlStructureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            a downloader exception
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.CommandGenerator">
            <summary>
            generates full commands from the provided podcast and command template
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.CommandGenerator.#ctor(PodcastUtilities.Common.Platform.IEnvironmentInformationProvider)">
            <summary>
            create the generator
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.CommandGenerator.ReplaceTokensInCommand(PodcastUtilities.Common.Configuration.ITokenisedCommand,System.String,System.String,PodcastUtilities.Common.Configuration.PodcastInfo)">
            <summary>
            replace any token elements in a command line and return a full command ready to be executed
            </summary>
            <param name="tokenisedCommand">tokenised command</param>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="destinationPathname">the full pathname for the download</param>
            <param name="podcast">the podcast, used as a source of tokens</param>
            <returns>a full command line, NULL if there is no command to execute</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.ExternalCommand">
            <summary>
            an external command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ExternalCommand.Command">
            <summary>
            the command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ExternalCommand.Arguments">
            <summary>
            the arguments
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ExternalCommand.WorkingDirectory">
            <summary>
            the current working dir
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.ICommandGenerator">
            <summary>
            generates full commands from the provided podcast and command template
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.ICommandGenerator.ReplaceTokensInCommand(PodcastUtilities.Common.Configuration.ITokenisedCommand,System.String,System.String,PodcastUtilities.Common.Configuration.PodcastInfo)">
            <summary>
            replace any token elements in a command line and return a full command ready to be executed
            </summary>
            <param name="tokenisedCommand">tokenised command</param>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="destinationPathname">the full pathname for the download</param>
            <param name="podcast">the podcast, used as a source of tokens</param>
            <returns>a full command line, NULL if there is no command to execute</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IExternalCommand">
            <summary>
            an external command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IExternalCommand.Command">
            <summary>
            the command
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IExternalCommand.Arguments">
            <summary>
            the arguments
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IExternalCommand.WorkingDirectory">
            <summary>
            the current working dir
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.PodcastFeedFactory">
            <summary>
            factory to get a feed
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.PodcastFeedFactory.CreatePodcastFeed(PodcastUtilities.Common.Configuration.PodcastFeedFormat,System.IO.Stream,System.String)">
            <summary>
            construct a feed from the supplied data in the specified format
            </summary>
            <param name="playlistFormat">the format of the data</param>
            <param name="feedData">the data for the feed</param>
            <param name="retainCopyFileName">if present then save a copy of the feed xml before parsing - null to just load</param>
            <returns>a podcast feed object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.ISyncItem">
            <summary>
            an item to be downloaded
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ISyncItem.Published">
            <summary>
            date time the episode was published
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ISyncItem.StateKey">
            <summary>
            state key
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ISyncItem.EpisodeUrl">
            <summary>
            the url to download from
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ISyncItem.DestinationPath">
            <summary>
            pathname to be downloaded to
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ISyncItem.EpisodeTitle">
            <summary>
            the title of the eposide
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ISyncItem.RetryWaitTimeInSeconds">
            <summary>
            time to wait if there is a file lock on state
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.ISyncItem.PostDownloadCommand">
            <summary>
            command to execute after the download
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.ISyncItemToEpisodeDownloaderTaskConverter">
            <summary>
            converts a number of IFeedSyncItem to IPodcastEpisodeDownloader tasks
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.ISyncItemToEpisodeDownloaderTaskConverter.ConvertItemsToTasks(System.Collections.Generic.IList{PodcastUtilities.Common.Feeds.ISyncItem},System.EventHandler{PodcastUtilities.Common.StatusUpdateEventArgs},System.EventHandler{PodcastUtilities.Common.ProgressEventArgs})">
            <summary>
            converts a number of IFeedSyncItem to IPodcastEpisodeDownloader tasks
            </summary>
            <param name="downloadItems">the items to be downloaded</param>
            <param name="statusUpdate">the update mechanism for the download - can be null</param>
            <param name="progressUpdate">the progress mechanism for the download - can be null</param>
            <returns>an array of tasks suitable to be run in a task pool</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IEpisodeDownloader">
            <summary>
            an object that can download podcast episodes on a background thread
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IEpisodeDownloader.SyncItem">
            <summary>
            the item to download
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IEpisodeDownloaderFactory">
            <summary>
            factory for a downloader task
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.IEpisodeDownloaderFactory.CreateDownloader">
            <summary>
            create an episode downloader task
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.EpisodeDownloader">
            <summary>
            a task that will download a podcast episode on a background thread
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.EpisodeDownloader.SyncItem">
            <summary>
            the item to download
            </summary>
        </member>
        <member name="E:PodcastUtilities.Common.Feeds.EpisodeDownloader.StatusUpdate">
            <summary>
            fire an event for an update in terms of progress or warning/error message
            </summary>
        </member>
        <member name="E:PodcastUtilities.Common.Feeds.EpisodeDownloader.ProgressUpdate">
            <summary>
            event for progress
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.EpisodeDownloader.TaskComplete">
            <summary>
            the event that is fired when the task completes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.EpisodeDownloader.Name">
            <summary>
            gets the display name for the task
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeDownloader.#ctor(PodcastUtilities.Common.IWebClientFactory,PodcastUtilities.Common.Platform.IDirectoryInfoProvider,PodcastUtilities.Common.Platform.IFileUtilities,PodcastUtilities.Common.IStateProvider,PodcastUtilities.Common.Platform.ICounterFactory,PodcastUtilities.Common.Platform.ICommandExecuter)">
            <summary>
            create a task
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeDownloader.Start(System.Object)">
            <summary>
            start running the task - the task is started in the background and the method will return
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeDownloader.Cancel">
            <summary>
            cancel a background task - or prevent a task from running
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeDownloader.IsStarted">
            <summary>
            true if the task has been started
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeDownloader.IsComplete">
            <summary>
            true if the task has been completed - or canceled
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.SyncItem">
            <summary>
            an item to be downloaded
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.SyncItem.Published">
            <summary>
            date time the episode was published
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.SyncItem.StateKey">
            <summary>
            state key
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.SyncItem.EpisodeUrl">
            <summary>
            the url to download from
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.SyncItem.DestinationPath">
            <summary>
            pathname to be downloaded to
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.SyncItem.EpisodeTitle">
            <summary>
            the title of the eposide
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.SyncItem.RetryWaitTimeInSeconds">
            <summary>
            time to wait if there is a file lock on state
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.SyncItem.PostDownloadCommand">
            <summary>
            command to execute after the download
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IPodcastFeed">
            <summary>
            a feed for a podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IPodcastFeed.Title">
            <summary>
            the title of the podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IPodcastFeed.Episodes">
            <summary>
            get the episodes of a feed
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IDownloader">
            <summary>
            download the feed channel data
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.IDownloader.DownloadFeed(PodcastUtilities.Common.Configuration.PodcastFeedFormat,System.Uri,System.String)">
            <summary>
            populate a PodcastFeed from the supplied URI
            </summary>
            <param name="feedFormat">the format of the feed</param>
            <param name="address">the url to get the feed from</param>
            <param name="retainCopyFileName">if present then save a copy of the feed xml before parsing - null to just load</param>
            <returns>the podcast feed</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IEpisodeFinder">
            <summary>
            identify the episodes that need to be downloaded in a feed
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.IEpisodeFinder.FindEpisodesToDownload(System.String,System.Int32,PodcastUtilities.Common.Configuration.PodcastInfo,System.Boolean)">
            <summary>
            Find episodes to download
            </summary>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="retryWaitTimeInSeconds">time to wait if there is a file access lock</param>
            <param name="podcastInfo">info on the podcast to download</param>
            <param name="retainFeedStream">true to keep the downloaded stream</param>
            <returns>list of episodes to be downloaded for the supplied podcastInfo</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IPodcastFeedFactory">
            <summary>
            factory to get a feed
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.IPodcastFeedFactory.CreatePodcastFeed(PodcastUtilities.Common.Configuration.PodcastFeedFormat,System.IO.Stream,System.String)">
            <summary>
            construct a feed from the supplied data in the specified format
            </summary>
            <param name="playlistFormat">the format of the data</param>
            <param name="feedData">the data for the feed</param>
            <param name="retainCopyFileName">if present then save a copy of the feed xml before parsing - null to just load</param>
            <returns>a podcast feed object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.IPodcastFeedItem">
            <summary>
            an individual episode of a pocast feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IPodcastFeedItem.EpisodeTitle">
            <summary>
            title of the item
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IPodcastFeedItem.Address">
            <summary>
            address of the attachment to download
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IPodcastFeedItem.Published">
            <summary>
            the date the episode was published
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IPodcastFeedItem.FileName">
            <summary>
            filename to use when saving the podcast file
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.IPodcastFeedItem.TitleAsFileName">
            <summary>
            get the episode title in a form that can be used as a filename
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.EpisodeDownloaderFactory">
            <summary>
            factory for a downloader task
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeDownloaderFactory.#ctor(PodcastUtilities.Common.IWebClientFactory,PodcastUtilities.Common.Platform.IDirectoryInfoProvider,PodcastUtilities.Common.Platform.IFileUtilities,PodcastUtilities.Common.IStateProvider,PodcastUtilities.Common.Platform.ICounterFactory,PodcastUtilities.Common.Platform.ICommandExecuter)">
            <summary>
            construct the factory
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeDownloaderFactory.CreateDownloader">
            <summary>
            create an episode downloader task
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.SyncItemToEpisodeDownloaderTaskConverter">
            <summary>
            converts a number of IFeedSyncItem to IPodcastEpisodeDownloader tasks
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.SyncItemToEpisodeDownloaderTaskConverter.#ctor(PodcastUtilities.Common.Feeds.IEpisodeDownloaderFactory)">
            <summary>
            construct the converter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.SyncItemToEpisodeDownloaderTaskConverter.ConvertItemsToTasks(System.Collections.Generic.IList{PodcastUtilities.Common.Feeds.ISyncItem},System.EventHandler{PodcastUtilities.Common.StatusUpdateEventArgs},System.EventHandler{PodcastUtilities.Common.ProgressEventArgs})">
            <summary>
            converts a number of IFeedSyncItem to IPodcastEpisodeDownloader tasks
            </summary>
            <param name="downloadItems">the items to be downloaded</param>
            <param name="statusUpdate">the update mechanism for the download - can be null</param>
            <param name="progressUpdate">the progress mechanism for the download - can be null</param>
            <returns>an array of tasks suitable to be run in a task pool</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.Downloader">
            <summary>
            object to download the feed channel data
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.Downloader.#ctor(PodcastUtilities.Common.Platform.IWebClient,PodcastUtilities.Common.Feeds.IPodcastFeedFactory)">
            <summary>
            create a downloader
            </summary>
            <param name="webClient">access to the internet</param>
            <param name="feedFactory">factory to create a feed</param>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.Downloader.DownloadFeed(PodcastUtilities.Common.Configuration.PodcastFeedFormat,System.Uri,System.String)">
            <summary>
            populate a PodcastFeed from the supplied URI
            </summary>
            <param name="feedFormat">the format of the feed</param>
            <param name="address">the url to get the feed from</param>
            <param name="retainCopyFileName">if present then save a copy of the feed xml before parsing - null to just load</param>
            <returns>the podcast feed</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.PodcastFeedInRssFormat">
            <summary>
            a podcast feed in RSS format
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.PodcastFeedInRssFormat.#ctor(System.IO.Stream,System.String)">
            <summary>
            create a feed from the supplied stream
            </summary>
            <param name="feedXml">the feed xml</param>
            <param name="retainCopyFileName">pathname to save the feed xml to, null to not save</param>
        </member>
        <member name="E:PodcastUtilities.Common.Feeds.PodcastFeedInRssFormat.StatusUpdate">
            <summary>
            event that is fired whenever a file is copied of an error occurs
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.PodcastFeedInRssFormat.Title">
            <summary>
            the title of the podcast
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.PodcastFeedInRssFormat.Episodes">
            <summary>
            get the episodes of a feed
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.PodcastFeedItem">
            <summary>
            An item in a podcast feed
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.PodcastFeedItem.EpisodeTitle">
            <summary>
            title of the item
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.PodcastFeedItem.Address">
            <summary>
            address of the attachment to download
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.PodcastFeedItem.Published">
            <summary>
            the date the episode was published
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.PodcastFeedItem.FileName">
            <summary>
            filename to use when saving the podcast file
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Feeds.PodcastFeedItem.TitleAsFileName">
            <summary>
            get the episode title in a form that can be used as a filename
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Feeds.EpisodeFinder">
            <summary>
            discover items to be downloaded from a feed
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeFinder.#ctor(PodcastUtilities.Common.Platform.IFileUtilities,PodcastUtilities.Common.Feeds.IPodcastFeedFactory,PodcastUtilities.Common.IWebClientFactory,PodcastUtilities.Common.Platform.ITimeProvider,PodcastUtilities.Common.IStateProvider,PodcastUtilities.Common.Platform.IDirectoryInfoProvider,PodcastUtilities.Common.Feeds.ICommandGenerator)">
            <summary>
            discover items to be downloaded from a feed
            </summary>
        </member>
        <member name="E:PodcastUtilities.Common.Feeds.EpisodeFinder.StatusUpdate">
            <summary>
            event that is fired whenever a file is copied of an error occurs
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Feeds.EpisodeFinder.FindEpisodesToDownload(System.String,System.Int32,PodcastUtilities.Common.Configuration.PodcastInfo,System.Boolean)">
            <summary>
            Find episodes to download
            </summary>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="retryWaitTimeInSeconds">time to wait if there is a file access lock</param>
            <param name="podcastInfo">info on the podcast to download</param>
            <param name="retainFeedStream">true to keep the downloaded stream</param>
            <returns>list of episodes to be downloaded for the supplied podcastInfo</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Files.IEpisodePurger">
            <summary>
            an object that can purge downloads
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.IEpisodePurger.FindEpisodesToPurge(System.String,PodcastUtilities.Common.Configuration.PodcastInfo)">
            <summary>
            find old downloads that can be deleted
            </summary>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="podcastInfo">info on the podcast to download</param>
            <returns>list of episodes to be deleted for the supplied podcastInfo</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Files.IEpisodePurger.FindEmptyFoldersToDelete(System.String,PodcastUtilities.Common.Configuration.PodcastInfo,System.Collections.Generic.IList{PodcastUtilities.Common.Platform.IFileInfo})">
            <summary>
            Find folders that will be empty and that can be purged
            </summary>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="podcastInfo">info on the podcast to download</param>
            <param name="filesThatWillBeDeleted">files that will be removed and do not count when considering an empty folder</param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Files.IEpisodePurger.PurgeFolder(PodcastUtilities.Common.Platform.IDirectoryInfo)">
            <summary>
            purge a folder, removing any files that were automatically generated first
            </summary>
            <param name="folder">folder to delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.IUnwantedFolderRemover">
            <summary>
            support the ability to remove unwanted empty folders
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.IUnwantedFolderRemover.RemoveFolderIfEmpty(System.String,System.Boolean)">
            <summary>
            remove a folder if there are no files in it, used by the synchroniser
            </summary>
            <param name="folder">folder to delete</param>
            <param name="whatIf">true to emit all the status updates but not actually perform the deletes, false to do the delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.UnwantedFolderRemover">
            <summary>
            support the ability to remove unwanted empty folders
            </summary>
        </member>
        <member name="E:PodcastUtilities.Common.Files.UnwantedFolderRemover.StatusUpdate">
            <summary>
            event that is fired whenever a file is removed of an error occurs
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.UnwantedFolderRemover.#ctor(PodcastUtilities.Common.Platform.IDirectoryInfoProvider,PodcastUtilities.Common.Platform.IFileUtilities)">
             <summary>
             construct the removed
             </summary>
            <param name="directoryInfoProvider">abstract access to the file system</param>
            <param name="fileUtilities">abstract file utilities</param>
        </member>
        <member name="M:PodcastUtilities.Common.Files.UnwantedFolderRemover.RemoveFolderIfEmpty(System.String,System.Boolean)">
            <summary>
            remove a folder if there are no files in it, used by the synchroniser
            </summary>
            <param name="folder">folder to delete</param>
            <param name="whatIf">true to emit all the status updates but not actually perform the deletes, false to do the delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.EpisodePurger">
            <summary>
            purge old download files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.EpisodePurger.#ctor(PodcastUtilities.Common.Platform.ITimeProvider,PodcastUtilities.Common.Platform.IDirectoryInfoProvider,PodcastUtilities.Common.Platform.IFileUtilities)">
            <summary>
            create the purger
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.EpisodePurger.FindEpisodesToPurge(System.String,PodcastUtilities.Common.Configuration.PodcastInfo)">
            <summary>
            find old downloads that can be deleted
            </summary>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="podcastInfo">info on the podcast to download</param>
            <returns>list of episodes to be deleted for the supplied podcastInfo</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Files.EpisodePurger.FindEmptyFoldersToDelete(System.String,PodcastUtilities.Common.Configuration.PodcastInfo,System.Collections.Generic.IList{PodcastUtilities.Common.Platform.IFileInfo})">
            <summary>
            Find folders that will be empty and that can be purged
            </summary>
            <param name="rootFolder">the root folder for all downloads</param>
            <param name="podcastInfo">info on the podcast to download</param>
            <param name="filesThatWillBeDeleted">files that will be removed and do not count when considering an empty folder</param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Files.EpisodePurger.PurgeFolder(PodcastUtilities.Common.Platform.IDirectoryInfo)">
            <summary>
            purge a folder, removing any files that were automatically generated first
            </summary>
            <param name="folder">folder to delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.Copier">
            <summary>
            copy files in the file system
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Copier.#ctor(PodcastUtilities.Common.Platform.IDriveInfoProvider,PodcastUtilities.Common.Platform.IFileUtilities,PodcastUtilities.Common.Platform.IPathUtilities)">
            <summary>
             construct the copier
            </summary>
            <param name="driveInfoProvider">abstract access to the file system drive</param>
            <param name="fileUtilities">abstract file utilities</param>
            <param name="pathUtilities">abstract path utilities</param>
        </member>
        <member name="E:PodcastUtilities.Common.Files.Copier.StatusUpdate">
            <summary>
            event that is fired whenever a file is copied of an error occurs
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Copier.CopyFilesToTarget(System.Collections.Generic.IEnumerable{PodcastUtilities.Common.Files.FileSyncItem},System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            perform the copy operation
            </summary>
            <param name="sourceFiles">the list of SyncItem s to be copied</param>
            <param name="sourceRootPath">the root pathname of the source</param>
            <param name="destinationRootPath">the root pathname to the destination</param>
            <param name="freeSpaceToLeaveOnDestination">free space to meave on the destination in MB</param>
            <param name="whatif">true to emit all the status update but not actually perform the copy, false to do the copy</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.Sorter">
            <summary>
            a file sorter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Sorter.Sort(System.Collections.Generic.IEnumerable{PodcastUtilities.Common.Platform.IFileInfo},PodcastUtilities.Common.Configuration.PodcastFileSortField,System.Boolean)">
            <summary>
            sort the supplied list of abstract files
            </summary>
            <param name="files">list of abstract files</param>
            <param name="sortField">field to sort on "creationtime" to use the file created time anything else to use the file name</param>
            <param name="ascendingSort">true to sort ascending false to sort descending</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.ICopier">
            <summary>
            supports the ability to copy a number of SyncItem
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.ICopier.CopyFilesToTarget(System.Collections.Generic.IEnumerable{PodcastUtilities.Common.Files.FileSyncItem},System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            perform the copy operation
            </summary>
            <param name="sourceFiles">the list of SyncItem s to be copied</param>
            <param name="sourceRootPath">the root pathname of the source</param>
            <param name="destinationRootPath">the root pathname to the destination</param>
            <param name="freeSpaceToLeaveOnDestination">free space to meave on the destination in MB</param>
            <param name="whatif">true to emit all the status updates but not actually perform the copy, false to do the copy</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.IFinder">
            <summary>
            supports the ability find files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.IFinder.GetFiles(System.String,System.String,System.Int32,PodcastUtilities.Common.Configuration.PodcastFileSortField,System.Boolean)">
            <summary>
            gets a number of files that match a given pattern
            </summary>
            <param name="folderPath">folder to look in</param>
            <param name="pattern">pattern to look for eg. *.mp3</param>
            <param name="maximumNumberOfFiles">maximum number of files to find</param>
            <param name="sortField">field to sort on</param>
            <param name="ascendingSort">true to sort ascending false to sort descending</param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Files.IFinder.GetFiles(System.String,System.String)">
            <summary>
            gets all the files that match a given pattern
            </summary>
            <param name="folderPath">folder to look in</param>
            <param name="pattern">pattern to look for eg. *.mp3</param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Files.ISorter">
            <summary>
            supports the ability to sort files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.ISorter.Sort(System.Collections.Generic.IEnumerable{PodcastUtilities.Common.Platform.IFileInfo},PodcastUtilities.Common.Configuration.PodcastFileSortField,System.Boolean)">
            <summary>
            sort the supplied list of abstract files
            </summary>
            <param name="files">list of abstract files</param>
            <param name="sortField">field to sort on "creationtime" to use the file created time anything else to use the file name</param>
            <param name="ascendingSort">true to sort ascending false to sort descending</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.IUnwantedFileRemover">
            <summary>
            supports the ability to remove unwanted files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.IUnwantedFileRemover.RemoveUnwantedFiles(System.Collections.Generic.IEnumerable{PodcastUtilities.Common.Platform.IFileInfo},System.String,System.String,System.Boolean)">
            <summary>
            remove the files that are not specified in the list of files to keep
            </summary>
            <param name="filesToKeep">the files to be kept</param>
            <param name="folderToRemoveFrom">folder to remove files from</param>
            <param name="pattern">file patter to look for eg. *.mp3</param>
            <param name="whatIf">true to emit all the status updates but not actually perform the deletes, false to do the delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.Synchronizer">
            <summary>
            synchronise the files from the podcasts in a control file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Synchronizer.#ctor(PodcastUtilities.Common.Files.IFinder,PodcastUtilities.Common.Files.ICopier,PodcastUtilities.Common.Files.IUnwantedFileRemover,PodcastUtilities.Common.Files.IUnwantedFolderRemover)">
            <summary>
            construct a podcast synchroniser
            </summary>
            <param name="fileFinder">abstract interface to the file system to find media files</param>
            <param name="fileCopier">abstract file copier</param>
            <param name="fileRemover">abstract file remover, to synchronise deleted files in the source to the destination</param>
            <param name="folderRemover">abstract folder remover, to remove folder that have gone empty during sync</param>
        </member>
        <member name="E:PodcastUtilities.Common.Files.Synchronizer.StatusUpdate">
            <summary>
            event that is fired whenever as each operation is performed or if an error occurs
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Synchronizer.Synchronize(PodcastUtilities.Common.Configuration.IReadOnlyControlFile,System.Boolean)">
            <summary>
            synchronise podcast media files
            </summary>
            <param name="controlFile">control file to use to control the process</param>
            <param name="whatIf">true to generate the status messages but not to actually perform the file copy / deletes</param>
        </member>
        <member name="T:PodcastUtilities.Common.Files.Finder">
            <summary>
            finds files
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Finder.#ctor(PodcastUtilities.Common.Files.ISorter,PodcastUtilities.Common.Platform.IDirectoryInfoProvider)">
            <summary>
            construct the copier
            </summary>
            <param name="fileSorter">object used to sort the files</param>
            <param name="directoryInfoProvider">astract access to the file system</param>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Finder.GetFiles(System.String,System.String,System.Int32,PodcastUtilities.Common.Configuration.PodcastFileSortField,System.Boolean)">
            <summary>
            gets a number of files that match a given pattern
            </summary>
            <param name="folderPath">folder to look in</param>
            <param name="pattern">pattern to look for eg. *.mp3</param>
            <param name="maximumNumberOfFiles">maximum number of files to find</param>
            <param name="sortField">field to sort on</param>
            <param name="ascendingSort">true to sort ascending false to sort descending</param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Files.Finder.GetFiles(System.String,System.String)">
            <summary>
            gets all the files that match a given pattern
            </summary>
            <param name="folderPath">folder to look in</param>
            <param name="pattern">pattern to look for eg. *.mp3</param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Files.FileSyncItem">
            <summary>
            an individulal item to be synchronised
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Files.FileSyncItem.Source">
            <summary>
            the item in the file system to be synchronised
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Files.FileSyncItem.DestinationPath">
            <summary>
            pathname to be copied to
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Files.FileSyncItem.Copied">
            <summary>
            true if it has been copied
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Files.UnwantedFileRemover">
            <summary>
            remove unwanted files, when files are removed from the source and we need to synchronise the delete
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.UnwantedFileRemover.#ctor(PodcastUtilities.Common.Platform.IDirectoryInfoProvider,PodcastUtilities.Common.Platform.IFileUtilities)">
             <summary>
             construct the remover
             </summary>
            <param name="directoryInfoProvider">abstract access to the file system</param>
            <param name="fileUtilities">abstract file utilities</param>
        </member>
        <member name="E:PodcastUtilities.Common.Files.UnwantedFileRemover.StatusUpdate">
            <summary>
            event that is fired whenever a file is removed of an error occurs
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Files.UnwantedFileRemover.RemoveUnwantedFiles(System.Collections.Generic.IEnumerable{PodcastUtilities.Common.Platform.IFileInfo},System.String,System.String,System.Boolean)">
            <summary>
            remove the files that are not specified in the list of files to keep
            </summary>
            <param name="filesToKeep">the files to be kept</param>
            <param name="folderToRemoveFrom">folder to remove files from</param>
            <param name="pattern">file patter to look for eg. *.mp3</param>
            <param name="whatIf">true to emit all the status updates but not actually perform the deletes, false to do the delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.IocLifecycle">
            <summary>
             The lifecycle to use when resolving objects.
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.IocLifecycle.PerRequest">
            <summary>
             Create a new object on each request
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.IocLifecycle.PerThread">
            <summary>
             Create one instance of the class per thread
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.IocLifecycle.Singleton">
            <summary>
             Create a single instance for the whole application
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.IState">
            <summary>
            state object
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.IState.DownloadHighTide">
            <summary>
            the latest publish date for a downloaded podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.IState.SaveState(System.String)">
            <summary>
            persist the state
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.IStateProvider">
            <summary>
            provides access to the state
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.IStateProvider.GetState(System.String)">
            <summary>
            get the state identified by the filename
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.IXmlEncoder">
            <summary>
             Interface for encoding/escaping strings to be written to xml
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.IXmlEncoder.Encode(System.String)">
            <summary>
            Encode a string so that reserved xml characters ('&lt;', '&amp;', etc.) are escaped
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Perfmon.AverageCounter">
            <summary>
            counter to measure the average time for an event
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.AverageCounter.#ctor(System.String,System.String)">
            <summary>
            make an average time counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.AverageCounter.#ctor(System.String,System.String,System.String)">
            <summary>
            make an average time counter and a total number of events counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.AverageCounter.Reset">
            <summary>
            reset the counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.AverageCounter.RegisterTime(System.Diagnostics.Stopwatch)">
            <summary>
            register the time for a single event and increments the total counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.AverageCounter.RegisterValue(System.Int64)">
            <summary>
            register the value to be recorded against a single event and then increments the total counter by the value as well
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Perfmon.CategoryInstaller">
            <summary>
            mechanism used to install categories
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstaller.PodcastUtilitiesCommonCounterCategory">
            <summary>
            the category we will create the common counters in
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstaller.AverageTimeToDownload">
            <summary>
            counter name
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstaller.NumberOfDownloads">
            <summary>
            counter name
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstaller.AverageMBDownload">
            <summary>
            counter name
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstaller.SizeOfDownloads">
            <summary>
            counter name
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.CategoryInstaller.#ctor(PodcastUtilities.Common.Platform.IPerfmonCounterUtilities,PodcastUtilities.Common.Platform.IPerfmonCounterCreationDataProvider)">
            <summary>
            create an installer
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.CategoryInstaller.DeleteCatagory(System.String)">
            <summary>
            remove this category
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.CategoryInstaller.RefreshCatagoryWithCounters(System.String,System.String)">
            <summary>
            refresh the catagory (creating if needed) and then update the catagory to contain all the counters that have been added to the installer
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.CategoryInstaller.AddCounter(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            add a counter to the installer, this counter can then be installed by calling the RefreshCatagoryWithCounters method
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Perfmon.IAverageCounter">
            <summary>
            a performance counter for measuring the average lenth of time it takes for an event
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.IAverageCounter.Reset">
            <summary>
            reset the counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.IAverageCounter.RegisterTime(System.Diagnostics.Stopwatch)">
            <summary>
            register the time for a single event and increments the total counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.IAverageCounter.RegisterValue(System.Int64)">
            <summary>
            register the value to be recorded against a single event and then increments the total counter by the value as well
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Perfmon.NullAverageTimeCounter">
            <summary>
            a counter that does nothing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullAverageTimeCounter.Reset">
            <summary>
            reset the counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullAverageTimeCounter.RegisterTime(System.Diagnostics.Stopwatch)">
            <summary>
            register the time for a single event
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullAverageTimeCounter.RegisterValue(System.Int64)">
            <summary>
            regirster the value to be recorded against a single event
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:PodcastUtilities.Common.Perfmon.NullCounter">
            <summary>
            an implementation of a performance moniter counter that does nothing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullCounter.#ctor">
            <summary>
            make a null counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullCounter.Reset">
            <summary>
            reset the counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullCounter.Increment">
            <summary>
            increment
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullCounter.IncrementBy(System.Int64)">
            <summary>
            increment by an amount
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.NullCounter.Decrement">
            <summary>
            decrement 
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Perfmon.ICategoryInstaller">
            <summary>
            update or refresh a performance category
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.ICategoryInstaller.RefreshCatagoryWithCounters(System.String,System.String)">
            <summary>
            refresh the catagory (creating if needed) and then update the catagory to contain all the counters that have been added to the installer
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.ICategoryInstaller.DeleteCatagory(System.String)">
            <summary>
            remove this category
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Perfmon.ICategoryInstaller.AddCounter(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            add a counter to the installer, this counter can then be installed by calling the RefreshCatagoryWithCounters method
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Perfmon.CategoryInstallerRefeshResult">
            <summary>
            the result of running the installer
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstallerRefeshResult.Unknown">
            <summary>
            result is unknown
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstallerRefeshResult.CatagoryCreated">
            <summary>
            the category did not exist and has been created
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstallerRefeshResult.CatagoryUpdated">
            <summary>
            the category did exist and has been deleted and recreated
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Perfmon.CategoryInstallerRefeshResult.CatagoryDeleted">
            <summary>
            the category has been deleted
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.ICounterFactory">
            <summary>
            factory class for creating a counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.ICounterFactory.EnableCounters(System.Boolean)">
            <summary>
            swicth the counters on or off
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.ICounterFactory.CreateAverageCounter(System.String,System.String,System.String)">
            <summary>
            create an average counter with an optional total counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.ICounterFactory.CreateCounter(System.String,System.String)">
            <summary>
            create a counter
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.FileSystemAwareDirectoryInfoProvider">
            <summary>
             Knows which type of directory info provider to use based on the path
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareDirectoryInfoProvider.#ctor(PodcastUtilities.PortableDevices.IDeviceManager)">
            <summary>
             Constructs the directory info provider
            </summary>
            <param name="deviceManager"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareDirectoryInfoProvider.GetDirectoryInfo(System.String)">
            <summary>
            create an abstract directory object
            </summary>
            <param name="path">full path to the directory</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.FileSystemAwareDriveInfoProvider">
            <summary>
            Provides the right type of DriveInfo depending on whether the path is MTP or not
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareDriveInfoProvider.#ctor(PodcastUtilities.PortableDevices.IDeviceManager)">
            <summary>
             Constructs the directory info provider
            </summary>
            <param name="deviceManager"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareDriveInfoProvider.GetDriveInfoForPath(System.String)">
            <summary>
            create an abstract drive info object
            </summary>
            <param name="path">name of the drive/path</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.FileSystemAwareFileInfoProvider">
            <summary>
            Provides the correct kind of file info object
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileInfoProvider.#ctor(PodcastUtilities.PortableDevices.IDeviceManager)">
            <summary>
             Constructs the directory info provider
            </summary>
            <param name="deviceManager"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileInfoProvider.GetFileInfo(System.String)">
            <summary>
            create an abstract file info object
            </summary>
            <param name="path">full path to the file</param>
            <returns>the file info</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities">
            <summary>
            Utility methods to manipulate files in the physical file system.
            This class abstracts away the file system from the main body of code - it also 
            copes with MTP file systems.
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities.#ctor(PodcastUtilities.PortableDevices.IDeviceManager,PodcastUtilities.Common.Platform.IStreamHelper,PodcastUtilities.Common.Platform.IFileInfoProvider)">
            <summary>
             Construct the object
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities.FileExists(System.String)">
            <summary>
            check if a file exists
            </summary>
            <param name="path">pathname to check</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities.FileRename(System.String,System.String)">
            <summary>
            rename / move a file
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities.FileRename(System.String,System.String,System.Boolean)">
            <summary>
            rename / move a file
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
            <param name="allowOverwrite">set to true to overwrite an existing destination file</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities.FileCopy(System.String,System.String)">
            <summary>
            copy a file - will not overwrite an existing file
            the containing folder will be created if it does not exist
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            copy a file - the containing folder will be created if it does not exist
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
            <param name="allowOverwrite">set to true to overwrite an existing file</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwareFileUtilities.FileDelete(System.String)">
            <summary>
            delete a file
            </summary>
            <param name="path">pathname of the file to delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.FileSystemAwarePathUtilities">
            <summary>
             Implementation of <see cref="T:PodcastUtilities.Common.Platform.IPathUtilities"/> that works with MTP paths
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwarePathUtilities.GetFullPath(System.String)">
            <summary>
             Returns the absolute path for the supplied path, using the current directory and volume if path is not already an absolute path.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information</param>
            <returns>A string containing the fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileSystemAwarePathUtilities.GetTempFileName">
            <summary>
             Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
             (The same as <see cref="M:System.IO.Path.GetTempFileName"/>)
            </summary>
            <returns>The full path of the temporary file.</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.ICommandExecuter">
            <summary>
            execute a command
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.ICommandExecuter.ExecuteCommand(System.String,System.String,System.String)">
            <summary>
            execute a command
            </summary>
            <param name="command">command</param>
            <param name="arguments">args</param>
            <param name="workingDirectory">cwd - optional</param>
            <returns>std output</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IEnvironmentInformationProvider">
            <summary>
            provides information on the application environment
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IEnvironmentInformationProvider.GetCurrentApplicationDirectory">
            <summary>
            gett the directory that the currently executing application was loaded from
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IFileInfoProvider">
            <summary>
            used to provide the physical file system to the main code and a mock file system to the units tests
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IFileInfoProvider.GetFileInfo(System.String)">
            <summary>
            create an abstract file info object
            </summary>
            <param name="path">full path to the file</param>
            <returns>the file info</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IPathUtilities">
            <summary>
             Interface providing path manipulation functionality, removing dependencies on System.IO.Path
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPathUtilities.GetFullPath(System.String)">
            <summary>
             Returns the absolute path for the supplied path, using the current directory and volume if path is not already an absolute path.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information</param>
            <returns>A string containing the fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPathUtilities.GetTempFileName">
            <summary>
             Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
             (The same as <see cref="M:System.IO.Path.GetTempFileName"/>)
            </summary>
            <returns>The full path of the temporary file.</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IStreamHelper">
            <summary>
             Stream helper methods
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IStreamHelper.OpenRead(System.String)">
            <summary>
             Open a readable stream on a file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IStreamHelper.OpenWrite(System.String,System.Boolean)">
            <summary>
             Open a writeable stream on a file
            </summary>
            <param name="path"></param>
            <param name="allowOverwrite"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IStreamHelper.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
             Copy from one stream to another
            </summary>
            <param name="source">The source stream, must be readable</param>
            <param name="destination">The destination stream, must be writeable</param>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.Mtp.DirectoryInfo">
            <summary>
             Implementation of abstract directory info for MTP "directories" (parent objects)
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.DirectoryInfo.FullName">
            <summary>
            the full pathname of the directory
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.DirectoryInfo.Exists">
            <summary>
            true if it exists
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.DirectoryInfo.GetFiles(System.String)">
            <summary>
            gets an abstract collection of files that are contained by by the directory
            </summary>
            <param name="pattern">a search patter for example *.mp3</param>
            <returns>a collection of abstracted files</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.DirectoryInfo.GetDirectories(System.String)">
            <summary>
            gets an abstract collection of directories that are contained by the directory
            </summary>
            <param name="pattern">a search patter for example *.*</param>
            <returns>a collection of abstracted files</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.DirectoryInfo.Create">
            <summary>
            create the directory in the file system
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.DirectoryInfo.Delete">
            <summary>
            delete the directory in the file system
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.Mtp.FileInfo">
            <summary>
             Implementation of abstract file info for MTP "files" (child objects)
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.FileInfo.Name">
            <summary>
            the name of the file eg. file.ext
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.FileInfo.FullName">
            <summary>
            the full pathname of the object eg. c:\media\file.ext
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.FileInfo.CreationTime">
            <summary>
            date time the file was created
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.FileInfo.Length">
            <summary>
             Length of the file in bytes
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.Mtp.MtpDirectoryInfoProvider">
            <summary>
            MTP implementation of directory info provider
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.MtpDirectoryInfoProvider.#ctor(PodcastUtilities.PortableDevices.IDeviceManager)">
            <summary>
             Constructs the directory info provider
            </summary>
            <param name="deviceManager"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.MtpDirectoryInfoProvider.GetDirectoryInfo(System.String)">
            <summary>
            create an abstract directory object
            </summary>
            <param name="path">full path to the directory</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.Mtp.DriveInfo">
            <summary>
             Provide Drive info like funcionality for MTP "drives"
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.DriveInfo.AvailableFreeSpace">
            <summary>
            the free space in bytes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.Mtp.DriveInfo.Name">
            <summary>
            the name of the drive
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.Mtp.MtpDriveInfoProvider">
            <summary>
             MTP implementation of drive info provider
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.MtpDriveInfoProvider.#ctor(PodcastUtilities.PortableDevices.IDeviceManager)">
            <summary>
             Constructs the drive info provider
            </summary>
            <param name="deviceManager"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.Mtp.MtpDriveInfoProvider.GetDriveInfoForPath(System.String)">
            <summary>
            create an abstract drive info object
            </summary>
            <param name="path">name of the drive</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.StreamHelper">
            <summary>
            Stream helper methods
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.StreamHelper.OpenRead(System.String)">
            <summary>
             Open a readable stream on a file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.StreamHelper.OpenWrite(System.String,System.Boolean)">
            <summary>
             Open a writeable stream on a file
            </summary>
            <param name="path"></param>
            <param name="allowOverwrite"></param>
            <returns></returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.StreamHelper.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
             Copy from one stream to another
            </summary>
            <param name="source">The source stream, must be readable</param>
            <param name="destination">The destination stream, must be writeable</param>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemPerfmonCounter">
            <summary>
            provides access to a system perfmon counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounter.#ctor(System.String,System.String)">
            <summary>
            construct a counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounter.Reset">
            <summary>
            reset the counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounter.Increment">
            <summary>
            increment
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounter.IncrementBy(System.Int64)">
            <summary>
            increment by an amount
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounter.Decrement">
            <summary>
            decrement 
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.CounterFactory">
            <summary>
            factory class to produce a counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.CounterFactory.#ctor">
            <summary>
            live constructor
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.CounterFactory.EnableCounters(System.Boolean)">
            <summary>
            swicth the counters on or off
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.CounterFactory.CreateAverageCounter(System.String,System.String,System.String)">
            <summary>
            create an average counter with an optional total counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.CounterFactory.CreateCounter(System.String,System.String)">
            <summary>
            create a counter
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IPerfmonCounter">
            <summary>
            methods to interact with the system perfmon counters to isolate them from the main body of the code
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounter.Reset">
            <summary>
            reset the counter
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounter.Increment">
            <summary>
            increment
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounter.IncrementBy(System.Int64)">
            <summary>
            increment by an amount
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounter.Decrement">
            <summary>
            decrement 
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemPerfmonCounterCreationDataProvider">
            <summary>
            system implementation
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounterCreationDataProvider.GetCounter(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            construct a DTO to for use in the creation process
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IPerfmonCounterCreationDataProvider">
            <summary>
            used to isolate the main code from the physical system perfmon
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounterCreationDataProvider.GetCounter(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            construct a DTO to for use in the creation process
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IPerfmonCounterUtilities">
            <summary>
            abstract away the performace monitor implementation
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounterUtilities.Exists(System.String)">
            <summary>
            Test for the existence of a catagory
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounterUtilities.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Create a catagory
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IPerfmonCounterUtilities.Delete(System.String)">
            <summary>
            delete a catagory
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemPerfmonCounterUtilities">
            <summary>
            system implementation of the performance counters
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounterUtilities.Exists(System.String)">
            <summary>
            Test for the existence of a catagory
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounterUtilities.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
            <summary>
            Create a catagory
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemPerfmonCounterUtilities.Delete(System.String)">
            <summary>
            delete a catagory
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.WindowsCommandExecuter">
            <summary>
            command executer implementation for windows
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.WindowsCommandExecuter.ExecuteCommand(System.String,System.String,System.String)">
            <summary>
            execute a command
            </summary>
            <param name="command">command</param>
            <param name="arguments">args</param>
            <param name="workingDirectory">cwd - optional</param>
            <returns>std output</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.WindowsEnvironmentInformationProvider">
            <summary>
            provides information on the application environment
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.WindowsEnvironmentInformationProvider.GetCurrentApplicationDirectory">
            <summary>
            gett the directory that the currently executing application was loaded from
            </summary>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.FileUtilities">
            <summary>
            utility methods to manipulate files in the physical file system
            this class abstracts away the file system from the main body of code
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileUtilities.FileExists(System.String)">
            <summary>
            check if a file exists
            </summary>
            <param name="path">pathname to check</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileUtilities.FileRename(System.String,System.String)">
            <summary>
            rename / move a file
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileUtilities.FileRename(System.String,System.String,System.Boolean)">
            <summary>
            rename / move a file
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
            <param name="allowOverwrite">set to true to overwrite an existing destination file</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileUtilities.FileCopy(System.String,System.String)">
            <summary>
            copy a file - will not overwrite an existing file
            the containing folder will be created if it does not exist
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileUtilities.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            copy a file - the containing folder will be created if it does not exist
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
            <param name="allowOverwrite">set to true to overwrite an existing file</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.FileUtilities.FileDelete(System.String)">
            <summary>
            delete a file
            </summary>
            <param name="path">pathname of the file to delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IDirectoryInfo">
            <summary>
            methods to interact with directories in the physical file system and abstract away the file system from the main body of code
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IDirectoryInfo.FullName">
            <summary>
            the full pathname of the directory
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IDirectoryInfo.Exists">
            <summary>
            true if it exists
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IDirectoryInfo.GetFiles(System.String)">
            <summary>
            gets an abstract collection of files that are contained by by the directory
            </summary>
            <param name="pattern">a search patter for example *.mp3</param>
            <returns>a collection of abstracted files</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IDirectoryInfo.GetDirectories(System.String)">
            <summary>
            gets an abstract collection of directories that are contained by the directory
            </summary>
            <param name="pattern">a search patter for example *.*</param>
            <returns>a collection of abstracted files</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IDirectoryInfo.Create">
            <summary>
            create the directory in the file system
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IDirectoryInfo.Delete">
            <summary>
            delete the directory in the file system
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IDirectoryInfoProvider">
            <summary>
            used to provide the physical file system to the main code and a mock file system to the units tests
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IDirectoryInfoProvider.GetDirectoryInfo(System.String)">
            <summary>
            create an abstract directory object
            </summary>
            <param name="path">full path to the directory</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IDriveInfo">
            <summary>
            methods to query file system drives in the physical file system and abstract away the file system from the main body of code
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IDriveInfo.AvailableFreeSpace">
            <summary>
            the free space in bytes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IDriveInfo.Name">
            <summary>
            the name of the drive
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IDriveInfoProvider">
            <summary>
            used to provide the physical file system to the main code and a mock file system to the units tests
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IDriveInfoProvider.GetDriveInfoForPath(System.String)">
            <summary>
            create an abstract drive info object
            </summary>
            <param name="path">name of the drive</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IFileInfo">
            <summary>
            methods to query files in the physical file system and abstract away the file system from the main body of code
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IFileInfo.Name">
            <summary>
            the name of the file eg. file.ext
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IFileInfo.FullName">
            <summary>
            the full pathname of the object eg. c:\media\file.ext
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IFileInfo.CreationTime">
            <summary>
            date time the file was created
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.IFileInfo.Length">
            <summary>
             Length of the file in bytes
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IFileUtilities">
            <summary>
            methods to manipulate files in the physical file system and abstract away the file system from the main body of code
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IFileUtilities.FileExists(System.String)">
            <summary>
            check if a file exists
            </summary>
            <param name="path">pathname to check</param>
            <returns>true if the file exists</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IFileUtilities.FileRename(System.String,System.String)">
            <summary>
            rename / move a file
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IFileUtilities.FileRename(System.String,System.String,System.Boolean)">
            <summary>
            rename / move a file
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
            <param name="allowOverwrite">set to true to overwrite an existing destination file</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IFileUtilities.FileCopy(System.String,System.String)">
            <summary>
            copy a file - will not overwrite an existing file
            the containing folder will be created if it does not exist
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IFileUtilities.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            copy a file - the containing folder will be created if it does not exist
            </summary>
            <param name="sourceFileName">source pathname</param>
            <param name="destinationFileName">destination pathname</param>
            <param name="allowOverwrite">set to true to overwrite an existing file</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IFileUtilities.FileDelete(System.String)">
            <summary>
            delete a file
            </summary>
            <param name="path">pathname of the file to delete</param>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.ITimeProvider">
            <summary>
            abstract the date time for testing
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.ITimeProvider.Now">
            <summary>
            get the current time
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.ITimeProvider.UtcNow">
            <summary>
            get the current time - in utc/gmt
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.IWebClient">
            <summary>
            methods to interact with the internet to isolate the main body of the code from the physical network
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IWebClient.OpenRead(System.Uri)">
            <summary>
            open a readable stream from the supplied url
            </summary>
            <param name="address">url</param>
            <returns>readable stream</returns>
        </member>
        <member name="E:PodcastUtilities.Common.Platform.IWebClient.DownloadFileCompleted">
            <summary>
             event for completion
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IWebClient.DownloadFileAsync(System.Uri,System.String,System.Object)">
            <summary>
            download a file async
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.IWebClient.CancelAsync">
            <summary>
            cancel an async operation
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemDateTimeProvider">
            <summary>
            access the System.DateTime for 
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemDateTimeProvider.Now">
            <summary>
            get the current time
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemDateTimeProvider.UtcNow">
            <summary>
            get the current time - in utc/gmt
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemDirectoryInfo">
            <summary>
            methods to interact with directories in the physical file system and abstract away the file system from the main body of code
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDirectoryInfo.#ctor(System.String)">
            <summary>
            object constructor from a pathname as a string
            </summary>
            <param name="path">pathname</param>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDirectoryInfo.#ctor(System.IO.DirectoryInfo)">
            <summary>
            object constructor from another abstracted object
            </summary>
            <param name="directoryInfo">object to be constructed from</param>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemDirectoryInfo.Exists">
            <summary>
            true if it exists
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemDirectoryInfo.FullName">
            <summary>
            the full pathname of the directory
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDirectoryInfo.GetFiles(System.String)">
            <summary>
            gets an abstract collection of files that are contained by the directory
            </summary>
            <param name="pattern">a search patter for example *.mp3</param>
            <returns>a collection of abstracted files</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDirectoryInfo.GetDirectories(System.String)">
            <summary>
            gets an abstract collection of directories that are contained by the directory
            </summary>
            <param name="pattern">a search patter for example *.*</param>
            <returns>a collection of abstracted files</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDirectoryInfo.Create">
            <summary>
            create the directory in the file system
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDirectoryInfo.Delete">
            <summary>
            delete the directory in the file system
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemDirectoryInfoProvider">
            <summary>
            used to provide the physical file system to the main code and a mock file system to the units tests
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDirectoryInfoProvider.GetDirectoryInfo(System.String)">
            <summary>
            create an abstract directory object
            </summary>
            <param name="path">full path to the directory</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemDriveInfo">
            <summary>
            methods to query file system drives in the physical file system and abstract away the file system from the main body of code
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDriveInfo.#ctor(System.String)">
            <summary>
            construct an object from the specified name
            </summary>
            <param name="driveName"></param>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemDriveInfo.AvailableFreeSpace">
            <summary>
            the free space in bytes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemDriveInfo.Name">
            <summary>
            the name of the drive
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemDriveInfoProvider">
            <summary>
            used to provide the physical file system to the main code and a mock file system to the units tests
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemDriveInfoProvider.GetDriveInfoForPath(System.String)">
            <summary>
            create an abstract drive info object
            </summary>
            <param name="path">name of the drive</param>
            <returns>an abstrcat object</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemFileInfo">
            <summary>
            methods to query files in the physical file system and abstract away the file system from the main body of code
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemFileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            construct from anothe absract object
            </summary>
            <param name="fileInfo">object to construct from</param>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemFileInfo.Name">
            <summary>
            the name of the file eg. file.ext
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemFileInfo.FullName">
            <summary>
            the full pathname of the object eg. c:\media\file.ext
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemFileInfo.CreationTime">
            <summary>
            date time the file was created
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Platform.SystemFileInfo.Length">
            <summary>
             Length of the file in bytes
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Platform.SystemNetWebClient">
            <summary>
            provides access to the physical internet
            </summary>
        </member>
        <member name="E:PodcastUtilities.Common.Platform.SystemNetWebClient.ProgressUpdate">
            <summary>
            event for progress
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemNetWebClient.#ctor">
            <summary>
            provides access to the physical internet
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemNetWebClient.OpenRead(System.Uri)">
            <summary>
            open a readable stream from the supplied url
            </summary>
            <param name="address">url</param>
            <returns>readable stream</returns>
        </member>
        <member name="E:PodcastUtilities.Common.Platform.SystemNetWebClient.DownloadFileCompleted">
            <summary>
             event for completion
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemNetWebClient.DownloadFileAsync(System.Uri,System.String,System.Object)">
            <summary>
            download a file async
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemNetWebClient.CancelAsync">
            <summary>
            cancel an async operation
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Platform.SystemNetWebClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.ProgressEventArgs">
            <summary>
            information on the progress of a task
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.ProgressEventArgs.ProgressPercentage">
            <summary>
            percentage of the download that is complete
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.ProgressEventArgs.ItemsProcessed">
            <summary>
            number of items processed - for example number of bytes that have been downloaded
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.ProgressEventArgs.TotalItemsToProcess">
            <summary>
            total number of items to process - for example total number of bytes we are to download
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.ProgressEventArgs.UserState">
            <summary>
            user state that was passed to the task
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.IProgressUpdate">
            <summary>
            event mechanism for download update progress
            </summary>
        </member>
        <member name="E:PodcastUtilities.Common.IProgressUpdate.ProgressUpdate">
            <summary>
            event for progress
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.IStatusUpdate">
            <summary>
            event mechanism for an update in terms of progress or warning/error message
            </summary>
        </member>
        <member name="E:PodcastUtilities.Common.IStatusUpdate.StatusUpdate">
            <summary>
            fire an event for an update in terms of progress or warning/error message
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.ITaskPool">
            <summary>
            a pool of tasks to be performed
            used in preference to the ThreadPool as we need long running tasks
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.ITaskPool.RunAllTasks(System.Int32,PodcastUtilities.Common.ITask[])">
            <summary>
            run all the tasks in the pool
            </summary>
            <param name="numberOfThreads">number of background threads to use</param>
            <param name="tasks">tasks to run</param>
        </member>
        <member name="M:PodcastUtilities.Common.ITaskPool.CancelAllTasks">
            <summary>
            abandon all the incomplete and unstarted tasks in the pool
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.IIocContainer">
            <summary>
            supports the ability to register objects in an IoC container
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.IIocContainer.Register``2">
            <summary>
            register a service
            </summary>
            <typeparam name="TService">the service to be registered, usually an interface</typeparam>
            <typeparam name="TImplementor">the concrete implementation</typeparam>
        </member>
        <member name="M:PodcastUtilities.Common.IIocContainer.Register``2(PodcastUtilities.Common.IocLifecycle)">
            <summary>
            register a service
            </summary>
            <typeparam name="TService">the service to be registered, usually an interface</typeparam>
            <typeparam name="TImplementor">the concrete implementation</typeparam>
            <param name="lifecycle">The lifecycle of the registered implementation</param>
        </member>
        <member name="M:PodcastUtilities.Common.IIocContainer.Register(System.Type)">
            <summary>
             Register a type as both the service type and implementing type.
            </summary>
            <param name="serviceTypeToRegisterAsSelf">The service/implementing type to register</param>
        </member>
        <member name="M:PodcastUtilities.Common.IIocContainer.Resolve``1">
            <summary>
             Resolve a service
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.IPlaylist">
            <summary>
            supports the functionality needed to manage a playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.IPlaylist.AddTrack(System.String)">
            <summary>
            Add a track to the playlist
            </summary>
            <param name="filePath">pathname to add, can be relative or absolute</param>
            <returns>true if the file was added false if the track was already present</returns>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.IPlaylist.FileName">
            <summary>
            filename to use when saving the playlist file
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.IPlaylist.NumberOfTracks">
            <summary>
            number of tracks in the playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.IPlaylist.SaveFile">
            <summary>
            persist the playlist to disk
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.IPlaylist.SaveFile(System.String)">
            <summary>
            persist the playlist to disk
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.IPlaylist.Title">
            <summary>
            the title of the playlist
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.IPlaylistFactory">
            <summary>
            supports the factory pattern for playlists
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.IPlaylistFactory.CreatePlaylist(PodcastUtilities.Common.Playlists.PlaylistFormat,System.String)">
            <summary>
            create the correct playlist format
            </summary>
            <param name="playlistFormat">the playlist format required</param>
            <param name="fileName">filename to use for the playlist</param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.PlaylistAsx">
            <summary>
            ASX playlist
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Playlists.PlaylistAsx.EmptyAsxResource">
            <summary>
            the resource path to the ASX template
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.PlaylistAsx.#ctor(System.String,System.Boolean)">
            <summary>
            create a new playlist object
            </summary>
            <param name="fileName">filename that will be used to save the file, and possibly load an existing playlist from</param>
            <param name="create">true to load a blank template playlist false to load an existing playlist from disk</param>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.PlaylistAsx.NumberOfTracks">
            <summary>
            number of tracks in the playlist
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.PlaylistAsx.Title">
            <summary>
            the title of the playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.PlaylistAsx.AddTrack(System.String)">
            <summary>
            Add a track to the playlist
            </summary>
            <param name="filePath">pathname to add, can be relative or absolute</param>
            <returns>true if the file was added false if the track was already present</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.PlaylistFactory">
            <summary>
            factory to generate the correct playlist object
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.PlaylistFactory.CreatePlaylist(PodcastUtilities.Common.Playlists.PlaylistFormat,System.String)">
            <summary>
            create the correct playlist format
            </summary>
            <param name="playlistFormat">the playlist format required</param>
            <param name="fileName">filename to use for the playlist</param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.PlaylistFormat">
            <summary>
            the type of the playlist
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Playlists.PlaylistFormat.ASX">
            <summary>
            ASX playlist
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Playlists.PlaylistFormat.WPL">
            <summary>
            WPL playlist
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Playlists.PlaylistFormat.Unknown">
            <summary>
            Unknown playlist format
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.Generator">
            <summary>
            generate a playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.Generator.#ctor(PodcastUtilities.Common.Files.IFinder,PodcastUtilities.Common.Platform.IFileUtilities,PodcastUtilities.Common.Platform.IPathUtilities,PodcastUtilities.Common.Playlists.IPlaylistFactory)">
            <summary>
            create a playlist generator
            </summary>
            <param name="fileFinder">abstract access to the file system to find the files for the playlist</param>
            <param name="fileUtilities">abstract file utilities</param>
            <param name="pathUtilities">abstract path utilities</param>
            <param name="playlistFactory">factpry to generate the correct playlist object depending upon the selected format</param>
        </member>
        <member name="E:PodcastUtilities.Common.Playlists.Generator.StatusUpdate">
            <summary>
            event that is fired when the playlist is generated or copied
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.Generator.GeneratePlaylist(PodcastUtilities.Common.Configuration.IReadOnlyControlFile,System.Boolean)">
            <summary>
            generate a playlist
            </summary>
            <param name="control">control file to use to find the destinationRoot, and playlist format</param>
            <param name="copyToDestination">true to copy the playlist to the destination, false to write it locally</param>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.PlaylistWpl">
            <summary>
            a windows playlist
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Playlists.PlaylistWpl.EmptyWplResource">
            <summary>
            resource path to the WPL template
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.PlaylistWpl.#ctor(System.String,System.Boolean)">
            <summary>
            create a playlist object
            </summary>
            <param name="fileName">filename that will be used to save the file, and possibly load an existing playlist from</param>
            <param name="create">true to load a blank template playlist false to load an existing playlist from disk</param>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.PlaylistWpl.NumberOfTracks">
            <summary>
            number of tracks in the playlist
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.PlaylistWpl.Title">
            <summary>
            the title of the playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.PlaylistWpl.AddTrack(System.String)">
            <summary>
            Add a track to the playlist
            </summary>
            <param name="filePath">pathname to add, can be relative or absolute</param>
            <returns>true if the file was added false if the track was already present</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Playlists.XmlFileBase">
            <summary>
            base class for XML files for example playlists
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.#ctor(System.String,System.Boolean,System.String,System.Reflection.Assembly)">
            <summary>
            create the XML file object
            </summary>
            <param name="fileName">filename to read from and will be used to save to</param>
            <param name="create">true to load a template from the supplied resource path, false to load from disk using the filename</param>
            <param name="emptyPlaylistResource">resource pathname to load a nlank xml file from when creating</param>
            <param name="resourceAssembly">assembly to use to load the blank template from</param>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.GetXmlStream(System.Reflection.Assembly,System.String)">
            <summary>
            load a stream from an assembly
            </summary>
            <param name="assembly">assembly to use</param>
            <param name="xmlFileResourcePath">resource path to the xml file</param>
            <returns></returns>
        </member>
        <member name="P:PodcastUtilities.Common.Playlists.XmlFileBase.FileName">
            <summary>
            the filename for the XML file
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.LoadXmlString(System.String)">
            <summary>
            replace all the xml
            </summary>
            <param name="xml">the xml to inject</param>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.SaveFile">
            <summary>
            persist the XML to disk
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.SaveFile(System.String)">
            <summary>
            persist the XML to disk
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.GetNumberOfNodes(System.String)">
            <summary>
            number of tracks in the playlist
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.GetNodeText(System.String)">
            <summary>
            return the text from a specified node
            </summary>
            <param name="xpath">xpath to the node</param>
            <returns>the node text, an exception is thrown if the node does not ecist</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.SetNodeText(System.String,System.String)">
            <summary>
            set the text for the specified node, an exception is thrown if the node does not exist
            </summary>
            <param name="xpath">xpath to the node</param>
            <param name="nodeValue">value to set</param>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.XmlEncodeString(System.String)">
            <summary>
            Encode/escape any special xml characters
            </summary>
            <param name="source">string which may contain special xml chracters</param>
            <returns>escaped output</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Playlists.XmlFileBase.FindNode(System.String)">
            <summary>
            find a specific node
            </summary>
            <param name="xpath">xpath to the node</param>
            <returns>node or null</returns>
        </member>
        <member name="T:PodcastUtilities.Common.ITask">
            <summary>
            a task that can be performed on a background thread
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.ITask.TaskComplete">
            <summary>
            the event that is fired when the task completes
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.ITask.Name">
            <summary>
            gets the display name for the task
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.ITask.Start(System.Object)">
            <summary>
            start running the task - the task is started in the background and the method will return
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.ITask.Cancel">
            <summary>
            cancel a background task - or prevent a task from running
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.ITask.IsStarted">
            <summary>
            true if the task has been started
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.ITask.IsComplete">
            <summary>
            true if the task has been completed - or canceled
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.IWebClientFactory">
            <summary>
            generate a new web client
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.IWebClientFactory.CreateWebClient">
            <summary>
            generate a new web client - do not forget to dispose it
            </summary>
            <returns>a web client</returns>
        </member>
        <member name="T:PodcastUtilities.Common.Rfc822DateTime">
            <summary>
            Provides methods for converting <see cref="T:System.DateTime"/> structures 
            to and from the equivalent <a href="http://www.w3.org/Protocols/rfc822/#z28">RFC 822</a> 
            string representation.
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Rfc822DateTime._formats">
            <summary>
            Private member to hold array of formats that RFC 822 date-time representations conform to.
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.Rfc822DateTime.Format">
            <summary>
            Private member to hold the DateTime format string for representing a DateTime in the RFC 822 format.
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.Rfc822DateTime.Rfc822DateTimeFormat">
            <summary>
            Gets the custom format specifier that may be used to represent a <see cref="T:System.DateTime"/> in the RFC 822 format.
            </summary>
            <value>A <i>DateTime format string</i> that may be used to represent a <see cref="T:System.DateTime"/> in the RFC 822 format.</value>
            <remarks>
            <para>
            This method returns a string representation of a <see cref="T:System.DateTime"/> that utilizes the time zone 
            offset (local differential) to represent the offset from Greenwich mean time in hours and minutes. 
            The <see cref="P:PodcastUtilities.Common.Rfc822DateTime.Rfc822DateTimeFormat"/> is a valid date-time format string for use 
            in the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)"/> method.
            </para>
            <para>
            The <a href="http://www.w3.org/Protocols/rfc822/#z28">RFC 822</a> Date and Time specification 
            specifies that the year will be represented as a two-digit value, but the 
            <a href="http://www.rssboard.org/rss-profile#data-types-datetime">RSS Profile</a> recommends that 
            all date-time values should use a four-digit year. The <see cref="T:PodcastUtilities.Common.Rfc822DateTime"/> class 
            follows the RSS Profile recommendation when converting a <see cref="T:System.DateTime"/> to the equivalent 
            RFC 822 string representation.
            </para>
            </remarks>
        </member>
        <member name="M:PodcastUtilities.Common.Rfc822DateTime.GetRfc822DateTimePatterns">
            <summary>
            Gets an array of the expected formats for RFC 822 date-time string representations.
            </summary>
            <value>
            An array of the expected formats for RFC 822 date-time string representations 
            that may used in the <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> method.
            </value>
            <remarks>
            The array of the expected formats that is returned assumes that the RFC 822 time zone 
            is represented as or converted to a local differential representation.
            </remarks>
            <seealso cref="M:PodcastUtilities.Common.Rfc822DateTime.ConvertZoneToLocalDifferential(System.String)"/>
        </member>
        <member name="M:PodcastUtilities.Common.Rfc822DateTime.Parse(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent.
            </summary>
            <param name="dateTime">A string containing a date and time to convert.</param>
            <returns>
            A <see cref="T:System.DateTime"/> equivalent to the date and time contained in <paramref name="dateTime"/>, 
            expressed as <i>Coordinated Universal Time (UTC)</i>.
            </returns>
            <remarks>
            The string <paramref name="dateTime"/> is parsed using formatting information in the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="dateTime"/> is a <b>null</b> reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dateTime"/> is an empty string.</exception>
            <exception cref="T:System.FormatException"><paramref name="dateTime"/> does not contain a valid RFC 822 string representation of a date and time.</exception>
        </member>
        <member name="M:PodcastUtilities.Common.Rfc822DateTime.ConvertZoneToLocalDifferential(System.String)">
            <summary>
            Converts the time zone component of an RFC 822 date and time string representation to its local differential (time zone offset).
            </summary>
            <param name="dateTime">A string containing an RFC 822 date and time to convert.</param>
            <returns>A date and time string that uses local differential to describe the time zone equivalent to the date and time contained in <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:PodcastUtilities.Common.Rfc822DateTime.ToString(System.DateTime)">
            <summary>
            Converts the value of the specified <see cref="T:System.DateTime"/> object to its equivalent string representation.
            </summary>
            <param name="utcDateTime">The Coordinated Universal Time (UTC) <see cref="T:System.DateTime"/> to convert.</param>
            <returns>A RFC 822 string representation of the value of the <paramref name="utcDateTime"/>.</returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="utcDateTime"/> object does not represent a <see cref="F:System.DateTimeKind.Utc">Coordinated Universal Time (UTC)</see> value.</exception>
        </member>
        <member name="M:PodcastUtilities.Common.Rfc822DateTime.TryParse(System.String,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent.
            </summary>
            <param name="dateTime">A string containing a date and time to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:System.DateTime"/> value equivalent to the date and time 
            contained in <paramref name="dateTime"/>, expressed as <i>Coordinated Universal Time (UTC)</i>, 
            if the conversion succeeded, or <see cref="F:System.DateTime.MinValue">MinValue</see> if the conversion failed. 
            The conversion fails if the s parameter is a <b>null</b> reference (Nothing in Visual Basic), 
            or does not contain a valid string representation of a date and time. 
            This parameter is passed uninitialized.
            </param>
            <returns><b>true</b> if the <paramref name="dateTime"/> parameter was converted successfully; otherwise, <b>false</b>.</returns>
            <remarks>
            The string <paramref name="dateTime"/> is parsed using formatting information in the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object. 
            </remarks>
        </member>
        <member name="T:PodcastUtilities.Common.StatusUpdateLevel">
            <summary>
            the type of the update
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.StatusUpdateLevel.Status">
            <summary>
            information to be displayed
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.StatusUpdateLevel.Warning">
            <summary>
            a non critical warning
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.StatusUpdateLevel.Error">
            <summary>
            a fatal error
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.StatusUpdateLevel.Verbose">
            <summary>
            extra information that may be useful
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.XmlEncoder">
            <summary>
             Class for encoding/escaping strings to be written to xml
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.XmlEncoder.Encode(System.String)">
            <summary>
            Encode a string so that reserved xml characters ('&lt;', '&amp;', etc.) are escaped
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:PodcastUtilities.Common.XmlState">
            <summary>
            provides state information
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.XmlState.EmptyStateResource">
            <summary>
            resource path to the WPL template
            </summary>
        </member>
        <member name="F:PodcastUtilities.Common.XmlState.StateFileName">
            <summary>
            name of the file we keep state in
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.XmlState.#ctor">
            <summary>
            create a new empty state
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.XmlState.#ctor(System.String)">
            <summary>
            create the object and read the control file from the specified filename
            </summary>
            <param name="fileName">pathname to the control file xml</param>
        </member>
        <member name="M:PodcastUtilities.Common.XmlState.#ctor(System.Xml.XPath.IXPathNavigable)">
            <summary>
            only used for unit testing
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.XmlState.GetDate(System.Xml.XmlNode)">
            <summary>
            convert an XML tree into a datetime
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.XmlState.DownloadHighTide">
            <summary>
            the latest publish date for a downloaded podcast
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.XmlState.SaveState(System.String)">
            <summary>
            persist the state
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.StateProvider">
            <summary>
            provide state
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.StateProvider.#ctor(PodcastUtilities.Common.Platform.IFileUtilities)">
            <summary>
            construct the state provider
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.StateProvider.GetState(System.String)">
            <summary>
            get the state identified by the filename
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.StatusUpdateEventArgs">
            <summary>
            This is the event argument that is passed whenever a status update is fired
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.StatusUpdateEventArgs.#ctor(PodcastUtilities.Common.StatusUpdateLevel,System.String)">
            <summary>
            Construct a new message event arg.
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.StatusUpdateEventArgs.#ctor(PodcastUtilities.Common.StatusUpdateLevel,System.String,System.Exception)">
            <summary>
            Construct a new message event arg.
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.StatusUpdateEventArgs.MessageLevel">
            <summary>
            Get the type of the update
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.StatusUpdateEventArgs.Message">
            <summary>
            Get the message text
            </summary>
        </member>
        <member name="P:PodcastUtilities.Common.StatusUpdateEventArgs.Exception">
            <summary>
            Get the message text
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.TaskPool">
            <summary>
            a pool of tasks to be performed
            used in preference to the ThreadPool as we need long running tasks
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.TaskPool.RunAllTasks(System.Int32,PodcastUtilities.Common.ITask[])">
            <summary>
            run all the tasks in the pool
            </summary>
            <param name="numberOfThreads">number of background threads to use</param>
            <param name="tasks">tasks to run</param>
        </member>
        <member name="M:PodcastUtilities.Common.TaskPool.CancelAllTasks">
            <summary>
            abandon all the incomplete and unstarted tasks in the pool
            </summary>
        </member>
        <member name="T:PodcastUtilities.Common.WebClientFactory">
            <summary>
            factory class to generate a new web client
            </summary>
        </member>
        <member name="M:PodcastUtilities.Common.WebClientFactory.CreateWebClient">
            <summary>
            generate a new web client - do not forget to dispose it
            </summary>
            <returns>a web client</returns>
        </member>
    </members>
</doc>
